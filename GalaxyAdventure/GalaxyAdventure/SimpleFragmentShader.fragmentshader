#version 330 core

in vec2 UV;
in vec3 Position_worldspace;
in vec3 Normal_cameraspace;
in vec3 EyeDirection_cameraspace;
in vec3 LightDirectionCameraWorld;
in vec3 LightDirectionCameraSpaceShip;
in vec3 LightDirectionCameraGate;
in vec3 LightDirectionCameraStar;
in vec3 LightDirectionCameraAstro;

out vec4 fragmentColor;

uniform sampler2D objectTexture;
uniform vec3 LightPositionWorld;
uniform vec3 LightPositionSpaceShip;
uniform vec3 LightPositionGate;
uniform vec3 LightPositionAstro;
uniform vec3 LightPositionStar;
uniform sampler2D myTextureSampler;

vec3 lighting(float red, float green, float blue, float power, vec2 UV, vec3 Position_worldspace, 
				vec3 Normal_cameraspace, vec3 EyeDirection_cameraspace, vec3 LightDirectionCamera, vec3 LightPosition)
{
	vec3 LightColor = vec3(red, green, blue);
	float LightPower = power; 
	vec3 MaterialDiffuseColor = texture(objectTexture, UV - 2).rgb;
	vec3 MaterialAmbientColor = vec3(0.3, 0.3, 0.3) * MaterialDiffuseColor; 
	vec3 MaterialSpecularColor = vec3(1.0, 1.0, 1.0);

	float distance = length( LightPosition - Position_worldspace );
	vec3 normal = normalize(Normal_cameraspace);
	vec3 light = normalize(LightDirectionCamera);
	float cosTheta = clamp(dot(normal, light), .0, 1.0);
	float attenuation = clamp(1.0f - distance/cosTheta, 0.0f, 1.0f); attenuation *= attenuation;
	vec3 eye = normalize(EyeDirection_cameraspace);
	vec3 reflect = reflect(-light, normal);
	float cosAlpha = clamp( dot(eye, reflect), .0, 1.0);	
	vec3 color =	MaterialAmbientColor + attenuation *
						MaterialDiffuseColor * LightColor * LightPower * cosTheta / (distance * distance) *
						MaterialSpecularColor * LightColor * LightPower * pow(cosAlpha, 5) / (distance * distance);

	return color;
}

void main()
{
	fragmentColor = vec4(lighting(3.0f, 3.0f, 3.0f, 00.0f, UV, Position_worldspace, Normal_cameraspace, EyeDirection_cameraspace, LightDirectionCameraWorld, LightPositionWorld) +
					//Spaceship
					lighting(0.329412f, 0.329412f, 0.329412f, 90.0f, UV, Position_worldspace, Normal_cameraspace, EyeDirection_cameraspace, LightDirectionCameraSpaceShip, LightPositionSpaceShip) +
					// Gate
					lighting(0.81f, 0.71f, 0.23f, 90.0f, UV, Position_worldspace, Normal_cameraspace, EyeDirection_cameraspace, LightDirectionCameraGate, LightPositionGate) +
					// Star
					lighting(1.0f, 1.0f, 1.0f, 0.0f, UV, Position_worldspace, Normal_cameraspace, EyeDirection_cameraspace, LightDirectionCameraStar, LightPositionStar) +
					//Astro
					lighting(0.0f, 0.0f, 0.0f, 0.0f, UV, Position_worldspace, Normal_cameraspace, EyeDirection_cameraspace, LightDirectionCameraAstro, LightPositionAstro), 1.0);

				
	vec3 MaterialDiffuseColor = texture( myTextureSampler, UV ).rgb;
	vec3 MaterialAmbientColor = vec3(0.1,0.1,0.1) * MaterialDiffuseColor;
	vec3 MaterialSpecularColor = vec3(0.3,0.3,0.3);
	
}
